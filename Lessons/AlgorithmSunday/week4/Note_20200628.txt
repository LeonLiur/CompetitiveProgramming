#include <iostream>
#include <algorithm>

using namespace std;
int N, a[100];

int main() {
    cin >> N;
    for(int i = 0; i < N; ++i)
        cin >> a[i];
    sort(a, a + N);
    int mid = (N - 1) / 2; // N / 2 - 1

    for(int i = 0; i <= mid ; ++ i) {
        cout << a[mid - i] << " ";
        if(mid + i + 1 < N)
            cout << a[mid + i + 1] << " ";
    }
    return 0;
}

// Concept of space and runtime complexity
// Big O notation
// Your program tends to scale with the size of your input
// We want to find scenarios where are input is in the case such that our program runs as slow as possible
// Generally speaking, this means where input is as large as possible
// 100 million operations / second

https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.geeksforgeeks.org%2Fanalysis-algorithms-big-o-analysis%2F&psig=AOvVaw3vgbKPMGz3rlqmkjuGWBCH&ust=1593454432091000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCLC-3r2OpeoCFQAAAAAdAAAAABAD
// Big O notation
// O(1) time, constant time, addition is O(1) time
// O(log N) time, binary search
// O(N) time, looping through an array of length N
// O(N logN), sorting an array
// O(N ^ 2), looping a 2d array of size n by n
// If your algorithm depends on 2 inputs N, M
// O(2N) ---> O(N)
// O(N * M)
// O(N + M) ---> O(Max(N, M))

https://dmoj.ca/problem/bts18p2

// O(Q * S) time if we do naively 
// O(Q + S), aim for each query to be constant time, instead of linear time


// Today: preprocessing + prefix sums
// A[] = {1,2,3,4,5} 2
// Q queries: i, j ---> the sum of all numbers in indices i to j inclusive
// O(Q + N)

// Preprocess the array in O(N) time, then make each query O(1) time
// prefix[i] = A[i] + prefix[i - 1]

// prefix[0] = 1
// prefix[1] = 2 + 1 = 3
// prefix[2] = 3 + 3 = 6;
// prefix[3] = 4 + 6 = 10
// prefix[4] = 5 + 10 = 15


// prefix[i] gives us sum between indices 0 to i; how can we can we use this fact to get sum between any two indices (i, j)

// (1, 2) = 2 + 3 = 5
// (0, 3) = 1 + 2 + 3 + 4 = 10
// (3, 4) = 4 + 5 = 9

// sum between i, j = prefix[j] - prefix[i - 1] // unless i = 0, in which case the answer is just prefix[j]
https://dmoj.ca/problem/bts18p2

// Please do this right now: https://dmoj.ca/problem/dmopc14c2p4


#include <iostream>

using namespace std;

int Trees[1000000], prefix[1000000];
int N, Q, a, b;

int main() { 
  cin >> N;
  for(int i = 0; i < N; ++i)
    cin >> Trees[i];
  for(int i = 0; i < N; ++i) {
    prefix[i] = Trees[i];
    if(i != 0)
      prefix[i] += prefix[i - 1];
  }
  
  cin >> Q;
  while(Q--) {
    cin >> a >> b;
    if(a == 0)
      cout << prefix[b] << endl;
    else
      cout << prefix[b] - prefix[a - 1] << endl;
  }
}

#include <iostream>

using namespace std;
int N, T[1000001], Q, a, b;

int main() {
    cin >> N;
    for(int i = 1; i <= N; ++i) {
        cin >> T[i];
        T[i] += T[i - 1];
    }
    cin >> Q;
    while(Q--) {
        cin >> a >> b;
        cout << T[b + 1] - T[a] << endl;
    }
}

// Data structures stacks and queues

stack<int> st; // last in first out principle (LIFO)
queue<int> queue; // first in first out principle

st.push(1);
st.push(2);
st.push(3);
st.pop(); // what was popped out?


queue.push(1); // put 1 in the queue
queue.push(2); // put 2 in the queue
queue.push(3);
queue.pop() // what was removed?
queue.pop() // what gets removed?
  
Problem: I give you a string. I will ask you to match the brackets in the string
{ ksfjdlakjlas }
( dalkjfs )
[ asdlfkj ]
[()]
[(]

Input: exp = “[()]{}{[()()]()}”
Output: Balanced

Input: exp = “[(])”
Output: Not Balanced

HW:
Math/logic:
https://dmoj.ca/problem/ccc10s1     --DONE
https://dmoj.ca/problem/ccc11j3     --DONE
https://dmoj.ca/problem/ccc13s2     --DONE
https://dmoj.ca/problem/ccc14s2     --DONE
               
Critical Thinking:
https://dmoj.ca/problem/mwc15c4p2
               
challenge with stacks:
https://dmoj.ca/problem/ccc14s3     --DONE BUT TLE











